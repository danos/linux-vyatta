Revert "net/sched: act_mirred: Pull mac prior redir to non mac_header_xmit device"

Upstream commit 1f754ad07751 ("net/sched: act_mirred: Pull mac prior
redir to non mac_header_xmit device") fixes the case of redirecting
from a multipoint interface into a point2point interface by removing
the L2 information in the cause of performing a mirred
action. However, we rely on that exact behaviour for the mirred action
added to switches / vifs to redirect packets to the .spathintf which
is a tun interface and thus technically p2p.

Signed-off-by: Robert Shearman <robert.shearman@att.com>
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@ -217,10 +217,8 @@ static int tcf_mirred_act(struct sk_buff
 	bool use_reinsert;
 	bool want_ingress;
 	bool is_redirect;
-	bool expects_nh;
 	int m_eaction;
 	int mac_len;
-	bool at_nh;
 
 	rec_level = __this_cpu_inc_return(mirred_rec_level);
 	if (unlikely(rec_level > MIRRED_RECURSION_LIMIT)) {
@@ -264,19 +262,19 @@ static int tcf_mirred_act(struct sk_buff
 	/* All mirred/redirected skbs should clear previous ct info */
 	nf_reset_ct(skb2);
 
+	/* If action's target direction differs than filter's direction,
+	 * and devices expect a mac header on xmit, then mac push/pull is
+	 * needed.
+	 */
 	want_ingress = tcf_mirred_act_wants_ingress(m_eaction);
-
-	expects_nh = want_ingress || !m_mac_header_xmit;
-	at_nh = skb->data == skb_network_header(skb);
-	if (at_nh != expects_nh) {
-		mac_len = skb_at_tc_ingress(skb) ? skb->mac_len :
-			  skb_network_header(skb) - skb_mac_header(skb);
-		if (expects_nh) {
-			/* target device/action expect data at nh */
+	if (skb_at_tc_ingress(skb) != want_ingress && m_mac_header_xmit) {
+		if (!skb_at_tc_ingress(skb)) {
+			/* caught at egress, act ingress: pull mac */
+			mac_len = skb_network_header(skb) - skb_mac_header(skb);
 			skb_pull_rcsum(skb2, mac_len);
 		} else {
-			/* target device/action expect data at mac */
-			skb_push_rcsum(skb2, mac_len);
+			/* caught at ingress, act egress: push mac */
+			skb_push_rcsum(skb2, skb->mac_len);
 		}
 	}
 
